generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attachment {
  id              String        @id @default(cuid())
  name            String
  url             String
  size            Int
  type            String
  communication   Communication @relation(fields: [communicationId], references: [id], onDelete: Cascade)
  communicationId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([communicationId])
}

model Client {
  id             String          @id @default(cuid())
  name           String
  email          String?
  phone          String?
  company        String?
  notes          String?
  tags           Json            @default("[]")
  status         ClientStatus    @default(ACTIVE)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  communications Communication[]
  projects       Project[]
  documents      Document[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([userId, updatedAt])
  @@index([userId, name])
  @@index([userId, status])
}

model Communication {
  id          String            @id @default(cuid())
  type        CommunicationType
  subject     String
  content     String            @db.Text
  sentAt      DateTime          @default(now())
  client      Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  project     Project?          @relation(fields: [projectId], references: [id])
  projectId   String?
  attachments Attachment[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([clientId])
  @@index([projectId])
}

model Document {
  id             String            @id @default(cuid())
  name           String
  type           DocumentType
  status         DocumentStatus    @default(DRAFT)
  content        String?           @db.Text
  url            String?
  size           Int?
  variableValues Json?             @default("{}")
  isTemplate     Boolean           @default(false)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  client         Client?           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String?
  project        Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String?
  template       DocumentTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId     String?
  versions       DocumentVersion[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([userId])
  @@index([clientId])
  @@index([projectId])
  @@index([templateId])
  @@index([userId, type])
  @@index([userId, status])
  @@index([userId, isTemplate])
}

model DocumentTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        DocumentType
  content     String       @db.Text
  variables   Json         @default("[]")
  isDefault   Boolean      @default(false)
  isGlobal    Boolean      @default(false)
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  documents   Document[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([userId, type])
  @@index([userId, isDefault])
  @@index([isGlobal])
  @@index([isGlobal, type])
}

model DocumentVersion {
  id             String   @id @default(cuid())
  versionNumber  Int
  content        String   @db.Text
  variableValues Json?    @default("{}")
  contentHash    String
  changeNotes    String?  @db.Text
  metrics        Json?    @default("{}")
  createdBy      String
  document       Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId     String
  createdAt      DateTime @default(now())

  @@index([documentId])
  @@index([documentId, versionNumber])
  @@index([documentId, createdAt])
}

model Project {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  status         ProjectStatus   @default(PROPOSAL)
  startDate      DateTime?
  endDate        DateTime?
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String
  communications Communication[]
  documents      Document[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([clientId])
}

model User {
  id                String             @id @default(cuid())
  clerkId           String             @unique
  email             String             @unique
  name              String?
  imageUrl          String?
  clients           Client[]
  projects          Project[]
  documents         Document[]
  documentTemplates DocumentTemplate[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum ClientStatus {
  ACTIVE
  ARCHIVED
}

enum CommunicationType {
  EMAIL
  CALL
  MEETING
  NOTE
}

enum DocumentStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  ARCHIVED
}

enum DocumentType {
  PROPOSAL
  CONTRACT
  INVOICE
  REPORT
  OTHER
}

enum ProjectStatus {
  PROPOSAL
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELED
}
