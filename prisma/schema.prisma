generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attachment {
  id              String        @id @default(cuid())
  name            String
  url             String
  size            Int
  type            String
  communication   Communication @relation(fields: [communicationId], references: [id], onDelete: Cascade)
  communicationId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([communicationId])
}

model Client {
  id             String          @id @default(cuid())
  name           String
  email          String?
  phone          String?
  company        String?
  notes          String?
  tags           Json            @default("[]")
  status         ClientStatus    @default(ACTIVE)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  communications Communication[]
  projects       Project[]
  documents      Document[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([userId, updatedAt])
  @@index([userId, name])
  @@index([userId, status])
}

model Communication {
  id          String            @id @default(cuid())
  type        CommunicationType
  subject     String
  content     String            @db.Text
  sentAt      DateTime          @default(now())
  client      Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  project     Project?          @relation(fields: [projectId], references: [id])
  projectId   String?
  attachments Attachment[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([clientId])
  @@index([projectId])
}

model Document {
  id             String            @id @default(cuid())
  name           String
  type           DocumentType
  status         DocumentStatus    @default(DRAFT)
  content        String?           @db.Text
  url            String?
  size           Int?
  variableValues Json?             @default("{}")
  isTemplate     Boolean           @default(false)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  client         Client?           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String?
  project        Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String?
  template       DocumentTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId     String?
  versions       DocumentVersion[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([userId])
  @@index([clientId])
  @@index([projectId])
  @@index([templateId])
  @@index([userId, type])
  @@index([userId, status])
  @@index([userId, isTemplate])
}

model DocumentTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        DocumentType
  content     String       @db.Text
  variables   Json         @default("[]")
  isDefault   Boolean      @default(false)
  isGlobal    Boolean      @default(false)
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  documents   Document[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([userId, type])
  @@index([userId, isDefault])
  @@index([isGlobal])
  @@index([isGlobal, type])
}

model DocumentVersion {
  id             String   @id @default(cuid())
  versionNumber  Int
  content        String   @db.Text
  variableValues Json?    @default("{}")
  contentHash    String
  changeNotes    String?  @db.Text
  metrics        Json?    @default("{}")
  createdBy      String
  document       Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId     String
  createdAt      DateTime @default(now())

  @@index([documentId])
  @@index([documentId, versionNumber])
  @@index([documentId, createdAt])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  status      ProjectStatus @default(PROPOSAL)
  startDate   DateTime?
  endDate     DateTime?

  estimatedHours Int?
  actualHours    Int?           @default(0)
  budgetType     BudgetType?    @default(FIXED)
  totalBudget    Decimal?       @db.Decimal(10, 2)
  hourlyRate     Decimal?       @db.Decimal(8, 2)
  invoicedAmount Decimal?       @default(0) @db.Decimal(10, 2)
  progress       Int?           @default(0)
  health         ProjectHealth? @default(ON_TRACK)

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String
  communications Communication[]
  documents      Document[]
  milestones     Milestone[]
  tasks          Task[]
  timeEntries    TimeEntry[]
  phases         ProjectPhase[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([clientId])
  @@index([status])
  @@index([health])
  @@index([endDate])
}

model Milestone {
  id                     String          @id @default(cuid())
  name                   String
  description            String?         @db.Text
  dueDate                DateTime
  status                 MilestoneStatus @default(PENDING)
  deliverables           Json            @default("[]")
  paymentAmount          Decimal?        @db.Decimal(10, 2)
  clientApprovalRequired Boolean         @default(false)
  order                  Int
  completedAt            DateTime?

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tasks       Task[]
  timeEntries TimeEntry[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([projectId])
  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@index([projectId, order])
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?      @db.Text
  status         TaskStatus   @default(TODO)
  priority       TaskPriority @default(MEDIUM)
  estimatedHours Int          @default(0)
  actualHours    Int          @default(0)
  dueDate        DateTime?
  dependencies   Json         @default("[]")
  completedAt    DateTime?

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  milestone   Milestone?  @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  milestoneId String?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  timeEntries TimeEntry[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([projectId])
  @@index([milestoneId])
  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

model TimeEntry {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Int
  description String
  billable    Boolean   @default(true)
  hourlyRate  Decimal?  @db.Decimal(8, 2)

  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  milestoneId String?
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: SetNull)
  taskId      String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([projectId])
  @@index([milestoneId])
  @@index([taskId])
  @@index([userId])
  @@index([startTime])
  @@index([billable])
}

model ProjectPhase {
  id          String             @id @default(cuid())
  name        String
  description String?            @db.Text
  startDate   DateTime
  endDate     DateTime
  status      ProjectPhaseStatus @default(NOT_STARTED)
  order       Int

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([userId])
  @@index([projectId, order])
}

model User {
  id                String             @id @default(cuid())
  clerkId           String             @unique
  email             String             @unique
  name              String?
  imageUrl          String?
  clients           Client[]
  projects          Project[]
  documents         Document[]
  documentTemplates DocumentTemplate[]
  milestones        Milestone[]
  tasks             Task[]
  timeEntries       TimeEntry[]
  projectPhases     ProjectPhase[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum BudgetType {
  FIXED
  HOURLY
  RETAINER
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  APPROVED
  REJECTED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectHealth {
  ON_TRACK
  AT_RISK
  DELAYED
}

enum ProjectPhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ClientStatus {
  ACTIVE
  ARCHIVED
}

enum CommunicationType {
  EMAIL
  CALL
  MEETING
  NOTE
}

enum DocumentStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  ARCHIVED
}

enum DocumentType {
  PROPOSAL
  CONTRACT
  INVOICE
  REPORT
  OTHER
}

enum ProjectStatus {
  PROPOSAL
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELED
}
